// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SaldoBancarioAPI.Services.HGCotacoes;
//
//    var convertJson = ConvertJson.FromJson(jsonString);

namespace SaldoBancarioAPI.Services.HGCotacoes
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ConvertJson
    {
        [JsonProperty("by")]
        public string By { get; set; }

        [JsonProperty("valid_key")]
        public bool ValidKey { get; set; }

        [JsonProperty("results")]
        public Results Results { get; set; }

        [JsonProperty("execution_time")]
        public long ExecutionTime { get; set; }

        [JsonProperty("from_cache")]
        public bool FromCache { get; set; }
    }

    public partial class Results
    {
        [JsonProperty("currencies")]
        public Currencies Currencies { get; set; }

        [JsonProperty("stocks")]
        public Stocks Stocks { get; set; }

        [JsonProperty("available_sources")]
        public List<string> AvailableSources { get; set; }

        [JsonProperty("taxes")]
        public List<object> Taxes { get; set; }
    }

    public partial class Currencies
    {
        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("USD")]
        public Ars Usd { get; set; }

        [JsonProperty("EUR")]
        public Ars Eur { get; set; }

        [JsonProperty("GBP")]
        public Ars Gbp { get; set; }

        [JsonProperty("ARS")]
        public Ars Ars { get; set; }

        [JsonProperty("BTC")]
        public Ars Btc { get; set; }
    }

    public partial class Ars
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("buy")]
        public double Buy { get; set; }

        [JsonProperty("sell")]
        public double? Sell { get; set; }

        [JsonProperty("variation")]
        public double Variation { get; set; }
    }

    public partial class Stocks
    {
        [JsonProperty("IBOVESPA")]
        public Cac Ibovespa { get; set; }

        [JsonProperty("NASDAQ")]
        public Cac Nasdaq { get; set; }

        [JsonProperty("CAC")]
        public Cac Cac { get; set; }

        [JsonProperty("NIKKEI")]
        public Cac Nikkei { get; set; }
    }

    public partial class Cac
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("location")]
        public string Location { get; set; }

        [JsonProperty("variation")]
        public double Variation { get; set; }

        [JsonProperty("points", NullValueHandling = NullValueHandling.Ignore)]
        public double? Points { get; set; }
    }

    public partial class ConvertJson
    {
        public static ConvertJson FromJson(string json) => JsonConvert.DeserializeObject<ConvertJson>(json, SaldoBancarioAPI.Services.HGCotacoes.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ConvertJson self) => JsonConvert.SerializeObject(self, SaldoBancarioAPI.Services.HGCotacoes.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
